Delta based on simulated stock price paths

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf

ticker = yf.Ticker("MC.PA")
historic = ticker.history(period="1d")
S0 = historic['Close'].iloc[-1]
print(f"Dernier cours de clôture de LVMH (S0) : {S0:.2f} €")


def simuler_cours_lvmh(N, nb_paths=5, S0=800, mu=0.08, sigma=0.25):
    nb_jours = 252 * N
    dt = 1 / 252
    chemins = np.zeros((nb_paths, nb_jours))
    chemins[:, 0] = S0

    for i in range(nb_paths):
        for t in range(1, nb_jours):
            bruit = np.random.normal()
            chemins[i, t] = chemins[i, t-1] * np.exp((mu - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * bruit)

    return chemins

def calculer_delta_paths(paths, K, r, sigma, T):
    nb_paths, nb_jours = paths.shape
    deltas = np.zeros_like(paths)
    dt = T / nb_jours

    for i in range(nb_paths):
        for t in range(nb_jours):
            S = paths[i, t]
            time_remaining = T - t * dt
            if time_remaining <= 0:
                deltas[i, t] = 1.0 if S > K else 0.0
                continue
            d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * time_remaining) / (sigma * np.sqrt(time_remaining))
            deltas[i, t] = norm.cdf(d1)

    return deltas

N = 5
nb_paths = 5
mu = 0.08
sigma = 0.25
r = 0.02
T = N
K = S0 * 1 #ATM

paths = simuler_cours_lvmh_multi(N, nb_paths, S0, mu, sigma)
deltas = calculer_delta_paths(paths, K, r, sigma, T)
