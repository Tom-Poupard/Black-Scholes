# Black Scholes call price table depending on spot price (+-50%)

import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from scipy.stats import norm

lvmh = yf.Ticker("MC.PA")
data = lvmh.history(period="1d")
last_close = data['Close'].iloc[-1]
min_price = last_close * 0.5
max_price = last_close * 1.5

spot_prices = np.random.uniform(low=min_price, high=max_price, size=100)

strike = last_close
maturity = float(input("Maturity : "))
rf = float(input("Risk-free rate : "))
volatility = float(input("Implied volatility : "))

call_prices = []
for S in spot_prices:
  d1 = (np.log(S/strike) + (rf + (volatility**2)/2) * maturity) / (volatility * np.sqrt(maturity))
  d2 = d1 - volatility * np.sqrt(maturity)
  call_price = S * norm.cdf(d1) - strike * norm.cdf(d2) * np.exp(-rf * maturity)
  call_prices.append(call_price)

df = pd.DataFrame({
  'Spot Price' : np.round(spot_prices,2),
  'Call Price' : np.round(call_prices,2)
})

df = df.sort_values(by="Spot Price", ascending = True).reset_index(drop=True)
df.index = [f"Prix call {i+1}" for i in range(len(df))]

print(df.head(10))

plt.plot(df['Spot Price'], df['Call Price'], color = 'red')
plt.xlabel("Spot Price")
plt.ylabel("Call Price")
plt.title("Call price depending on Spot (+-30%)")
plt.grid(True)
plt.show()

